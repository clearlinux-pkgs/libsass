From 71b44aabcfb4d3978e1e2db31764c7b7a7aabcf4 Mon Sep 17 00:00:00 2001
From: Arzhan Kinzhalin <arzhan.i.kinzhalin@intel.com>
Date: Tue, 16 Oct 2018 00:04:17 -0700
Subject: [PATCH libsass] Mitigation for CVE-2018-11694, CVE-2018-11499.

Disable the flawed implementation of SASS selector-* functions
completely. It causes a series of vulnerabilities.

Signed-off-by: Arzhan Kinzhalin <arzhan.i.kinzhalin@intel.com>
---

This will replace the previous patch which only dealt with the error handling.
The implementation of selector functions mis-manages memory and hardly
sustainable (which, I guess, why the upstream is not eager to fix it). We only
use libsass for gnome (gnome-shell, particularly, requires it) and selector
features are not needed. Disabling selectors eliminates all the code paths which
may lead to either use-after-delete or SIGSEGV (known thus far).

---

 src/context.cpp   | 18 ++++++++++--------
 src/functions.cpp |  4 ++++
 src/functions.hpp | 36 ++++++++++++++++++++----------------
 3 files changed, 34 insertions(+), 24 deletions(-)

diff --git a/src/context.cpp b/src/context.cpp
index b199412c..c6879b39 100644
--- a/src/context.cpp
+++ b/src/context.cpp
@@ -899,14 +899,16 @@ namespace Sass {
     register_function(ctx, inspect_sig, inspect, env);
     register_function(ctx, unique_id_sig, unique_id, env);
     // Selector functions
-    register_function(ctx, selector_nest_sig, selector_nest, env);
-    register_function(ctx, selector_append_sig, selector_append, env);
-    register_function(ctx, selector_extend_sig, selector_extend, env);
-    register_function(ctx, selector_replace_sig, selector_replace, env);
-    register_function(ctx, selector_unify_sig, selector_unify, env);
-    register_function(ctx, is_superselector_sig, is_superselector, env);
-    register_function(ctx, simple_selectors_sig, simple_selectors, env);
-    register_function(ctx, selector_parse_sig, selector_parse, env);
+// CVE mitigation (CVE-2018-11694, CVE-2018-11499 et al.): remove support for
+// selectors until properly fixed in the upstream.
+//    register_function(ctx, selector_nest_sig, selector_nest, env);
+//    register_function(ctx, selector_append_sig, selector_append, env);
+//    register_function(ctx, selector_extend_sig, selector_extend, env);
+//    register_function(ctx, selector_replace_sig, selector_replace, env);
+//    register_function(ctx, selector_unify_sig, selector_unify, env);
+//    register_function(ctx, is_superselector_sig, is_superselector, env);
+//    register_function(ctx, simple_selectors_sig, simple_selectors, env);
+//    register_function(ctx, selector_parse_sig, selector_parse, env);
   }
 
   void register_c_functions(Context& ctx, Env* env, Sass_Function_List descrs)
diff --git a/src/functions.cpp b/src/functions.cpp
index c9999fc3..00029867 100644
--- a/src/functions.cpp
+++ b/src/functions.cpp
@@ -1947,6 +1947,9 @@ namespace Sass {
       }
       // return v;
     }
+// CVE mitigation (CVE-2018-11694, CVE-2018-11499 et al.): remove support for
+// selectors until properly fixed in the upstream.
+#if 0
     Signature selector_nest_sig = "selector-nest($selectors...)";
     BUILT_IN(selector_nest)
     {
@@ -2172,6 +2175,7 @@ namespace Sass {
       bool result = sel_sup->is_superselector_of(sel_sub);
       return SASS_MEMORY_NEW(Boolean, pstate, result);
     }
+#endif /* CVE mitigation */
 
     Signature unique_id_sig = "unique-id()";
     BUILT_IN(unique_id)
diff --git a/src/functions.hpp b/src/functions.hpp
index 7019be93..764bfb5c 100644
--- a/src/functions.hpp
+++ b/src/functions.hpp
@@ -97,14 +97,16 @@ namespace Sass {
     extern Signature keywords_sig;
     extern Signature set_nth_sig;
     extern Signature unique_id_sig;
-    extern Signature selector_nest_sig;
-    extern Signature selector_append_sig;
-    extern Signature selector_extend_sig;
-    extern Signature selector_replace_sig;
-    extern Signature selector_unify_sig;
-    extern Signature is_superselector_sig;
-    extern Signature simple_selectors_sig;
-    extern Signature selector_parse_sig;
+// CVE mitigation (CVE-2018-11694, CVE-2018-11499 et al.): remove support for
+// selectors until properly fixed in the upstream.
+//    extern Signature selector_nest_sig;
+//    extern Signature selector_append_sig;
+//    extern Signature selector_extend_sig;
+//    extern Signature selector_replace_sig;
+//    extern Signature selector_unify_sig;
+//    extern Signature is_superselector_sig;
+//    extern Signature simple_selectors_sig;
+//    extern Signature selector_parse_sig;
     extern Signature is_bracketed_sig;
     extern Signature content_exists_sig;
     extern Signature get_function_sig;
@@ -181,14 +183,16 @@ namespace Sass {
     BUILT_IN(keywords);
     BUILT_IN(set_nth);
     BUILT_IN(unique_id);
-    BUILT_IN(selector_nest);
-    BUILT_IN(selector_append);
-    BUILT_IN(selector_extend);
-    BUILT_IN(selector_replace);
-    BUILT_IN(selector_unify);
-    BUILT_IN(is_superselector);
-    BUILT_IN(simple_selectors);
-    BUILT_IN(selector_parse);
+// CVE mitigation (CVE-2018-11694, CVE-2018-11499 et al.): remove support for
+// selectors until properly fixed in the upstream.
+//    BUILT_IN(selector_nest);
+//    BUILT_IN(selector_append);
+//    BUILT_IN(selector_extend);
+//    BUILT_IN(selector_replace);
+//    BUILT_IN(selector_unify);
+//    BUILT_IN(is_superselector);
+//    BUILT_IN(simple_selectors);
+//    BUILT_IN(selector_parse);
     BUILT_IN(is_bracketed);
     BUILT_IN(content_exists);
     BUILT_IN(get_function);
-- 
2.19.1

